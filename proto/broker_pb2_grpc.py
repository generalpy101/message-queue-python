# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import proto.broker_pb2 as broker__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in broker_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class BrokerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Publish = channel.unary_unary(
                '/broker.Broker/Publish',
                request_serializer=broker__pb2.PublishRequest.SerializeToString,
                response_deserializer=broker__pb2.PublishResponse.FromString,
                _registered_method=True)
        self.MessageStream = channel.stream_stream(
                '/broker.Broker/MessageStream',
                request_serializer=broker__pb2.NodeMessage.SerializeToString,
                response_deserializer=broker__pb2.BrokerMessage.FromString,
                _registered_method=True)
        self.Ack = channel.unary_unary(
                '/broker.Broker/Ack',
                request_serializer=broker__pb2.AckRequest.SerializeToString,
                response_deserializer=broker__pb2.AckResponse.FromString,
                _registered_method=True)
        self.GetDeadLetter = channel.unary_unary(
                '/broker.Broker/GetDeadLetter',
                request_serializer=broker__pb2.Empty.SerializeToString,
                response_deserializer=broker__pb2.DeadLetterResponse.FromString,
                _registered_method=True)
        self.GetAllMessages = channel.unary_unary(
                '/broker.Broker/GetAllMessages',
                request_serializer=broker__pb2.Empty.SerializeToString,
                response_deserializer=broker__pb2.AllMessagesResponse.FromString,
                _registered_method=True)


class BrokerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Publish(self, request, context):
        """Producers -> publish messages
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MessageStream(self, request_iterator, context):
        """API nodes -> open bidirectional stream for delivery + acks
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ack(self, request, context):
        """Extra control/data plane RPCs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDeadLetter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BrokerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Publish': grpc.unary_unary_rpc_method_handler(
                    servicer.Publish,
                    request_deserializer=broker__pb2.PublishRequest.FromString,
                    response_serializer=broker__pb2.PublishResponse.SerializeToString,
            ),
            'MessageStream': grpc.stream_stream_rpc_method_handler(
                    servicer.MessageStream,
                    request_deserializer=broker__pb2.NodeMessage.FromString,
                    response_serializer=broker__pb2.BrokerMessage.SerializeToString,
            ),
            'Ack': grpc.unary_unary_rpc_method_handler(
                    servicer.Ack,
                    request_deserializer=broker__pb2.AckRequest.FromString,
                    response_serializer=broker__pb2.AckResponse.SerializeToString,
            ),
            'GetDeadLetter': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDeadLetter,
                    request_deserializer=broker__pb2.Empty.FromString,
                    response_serializer=broker__pb2.DeadLetterResponse.SerializeToString,
            ),
            'GetAllMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllMessages,
                    request_deserializer=broker__pb2.Empty.FromString,
                    response_serializer=broker__pb2.AllMessagesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'broker.Broker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('broker.Broker', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Broker(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/broker.Broker/Publish',
            broker__pb2.PublishRequest.SerializeToString,
            broker__pb2.PublishResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MessageStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/broker.Broker/MessageStream',
            broker__pb2.NodeMessage.SerializeToString,
            broker__pb2.BrokerMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Ack(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/broker.Broker/Ack',
            broker__pb2.AckRequest.SerializeToString,
            broker__pb2.AckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDeadLetter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/broker.Broker/GetDeadLetter',
            broker__pb2.Empty.SerializeToString,
            broker__pb2.DeadLetterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/broker.Broker/GetAllMessages',
            broker__pb2.Empty.SerializeToString,
            broker__pb2.AllMessagesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
