syntax = "proto3";

package broker;

service Broker {
  // Producers -> publish messages
  rpc Publish(PublishRequest) returns (PublishResponse);

  // API nodes -> open bidirectional stream for delivery + acks
  rpc MessageStream(stream NodeMessage) returns (stream BrokerMessage);

  // Extra control/data plane RPCs
  rpc Ack(AckRequest) returns (AckResponse);
  rpc GetDeadLetter(Empty) returns (DeadLetterResponse);
  rpc GetAllMessages(Empty) returns (AllMessagesResponse);
}

message PublishRequest {
  string topic = 1;
  string payload = 2;
}

message PublishResponse {
  string message_id = 1;
}

// This matches your Message dataclass
message BrokerMessage {
  string message_id = 1;
  string topic = 2;
  string data = 3;          // corresponds to `data: object`
  double enqueued_at = 4;   // float timestamp
  int32 retries = 5;
  MessageState state = 6;   // enum below
  int64 visibility_timeout = 7; // optional, for inflight tracking
}

// Maps to your MessageState Enum
enum MessageState {
  ENQUEUED = 0;
  PROCESSING = 1;
  INFLIGHT = 2;
  ACKNOWLEDGED = 3;
  RETRIED = 4;
}

message NodeMessage {
  oneof payload {
    Ack ack = 1;
    Heartbeat heartbeat = 2;
  }
}

message Ack {
  string message_id = 1;
}

message AckRequest {
  string message_id = 1;
}

message AckResponse {
  bool success = 1;
}

message DeadLetterResponse {
  repeated BrokerMessage messages = 1;
}

message AllMessagesResponse {
  repeated BrokerMessage messages = 1;
}

message Empty {}

message Heartbeat {
  int64 timestamp = 1;
}
